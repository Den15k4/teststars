from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, LabeledPrice
from ..database.models import Database
from ..keyboards.markups import Keyboards
from ..config import config
from ..services.referral import ReferralSystem

router = Router()

@router.callback_query(F.data == "buy_credits")
async def show_payment_options(callback: CallbackQuery):
    await callback.message.edit_text(
        "üí´ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n\n"
        "‚ÑπÔ∏è –ß–µ–º –±–æ–ª—å—à–µ –ø–∞–∫–µ—Ç, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!\n\n"
        "üí≥ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏",
        reply_markup=Keyboards.payment_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "check_balance")
async def check_balance(callback: CallbackQuery, db: Database):
    user_id = callback.from_user.id
    credits = await db.check_credits(user_id)
    
    await callback.message.edit_text(
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
        "1 –∫—Ä–µ–¥–∏—Ç = 1 –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        reply_markup=Keyboards.payment_menu()
    )
    await callback.answer()

@router.callback_query(F.data.matches(r"buy_\d+_stars"))
async def process_buy(callback: CallbackQuery, db: Database):
    try:
        package_id = int(callback.data.split("_")[1])
        package = next(
            (p for p in config.PACKAGES if p["id"] == package_id),
            None
        )
        
        if not package:
            await callback.answer("–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await callback.message.answer_invoice(
            title=f"–ü–æ–∫—É–ø–∫–∞ {package['description']}",
            description=f"–ö—É–ø–∏—Ç—å {package['credits']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
            payload=f"credits_{package_id}",
            provider_token="",  # –î–ª—è –∑–≤–µ–∑–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
            currency="XTR",
            prices=[
                LabeledPrice(
                    label=package['description'],
                    amount=package['credits']
                )
            ]
        )
        
        await callback.answer()

    except Exception as e:
        print(f"Error in process_buy: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")

@router.message(F.successful_payment)
async def successful_payment(message: Message, db: Database):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–∞–∫–µ—Ç–∞ –∏–∑ payload
        package_id = int(message.successful_payment.invoice_payload.split("_")[1])
        package = next(
            (p for p in config.PACKAGES if p["id"] == package_id),
            None
        )

        if package:
            # –ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
            await db.update_credits(message.from_id, package['credits'])

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            referral_system = ReferralSystem(db)
            bonus_amount = await referral_system.process_referral_payment(
                message.from_id,
                package['price']
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–æ–Ω—É—Å–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            if bonus_amount:
                referrer_id = await db.get_user_referrer(message.from_id)
                if referrer_id:
                    await message.bot.send_message(
                        referrer_id,
                        f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {bonus_amount:.2f} RUB "
                        f"–æ—Ç –æ–ø–ª–∞—Ç—ã –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!"
                    )

            await message.answer(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n"
                f"üí´ –ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤",
                reply_markup=Keyboards.after_payment()
            )

    except Exception as e:
        print(f"Error in successful_payment: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞",
            reply_markup=Keyboards.back_to_menu()
        )
