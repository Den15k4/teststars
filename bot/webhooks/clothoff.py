from aiohttp import web
import logging

logger = logging.getLogger(__name__)

class ClothOffWebhook:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db

    async def handle_webhook(self, request: web.Request) -> web.Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç ClothOff API"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ bytes
            body = await request.read()
            logger.info(f"Received webhook, body size: {len(body)} bytes")

            if len(body) > 50 * 1024 * 1024:  # 50 MB
                raise web.HTTPRequestEntityTooLarge(
                    max_size=50 * 1024 * 1024,
                    actual_size=len(body)
                )

            # –ï—Å–ª–∏ —ç—Ç–æ JSON
            if request.content_type == 'application/json':
                data = await request.json()
                logger.info(f"Webhook data: {data}")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ id_gen
                user_id = int(data['id_gen'].split('_')[1])
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await self.db.get_user(user_id)
                if not user:
                    raise ValueError(f"User not found for task {data['id_gen']}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                if data.get('status') == '500' or data.get('img_message') or data.get('img_message_2'):
                    error_msg = data.get('img_message') or data.get('img_message_2') or 'Unknown error'
                    
                    # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
                    if 'Age is too young' in error_msg:
                        await self.bot.send_message(
                            user_id,
                            "üîû –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ –º–ª–∞–¥—à–µ 18 –ª–µ—Ç.\n"
                            "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞.",
                            reply_markup=self.keyboards.main_menu()
                        )
                    else:
                        await self.bot.send_message(
                            user_id,
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n{error_msg}",
                            reply_markup=self.keyboards.main_menu()
                        )

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç
                    await self.db.return_credit(user_id)
                    await self.db.clear_pending_task(user_id)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                else:
                    image_data = data.get('result', body)
                    if image_data:
                        await self.bot.send_photo(
                            user_id,
                            photo=image_data,
                            caption=(
                                "‚ú® –ú—ã –µ—ë —Ä–∞–∑–¥–µ–ª–∏! –õ—é–±—É–π—Å—è!\n"
                                "–ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üí´ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"
                            ),
                            reply_markup=self.keyboards.main_menu()
                        )
                        await self.db.clear_pending_task(user_id)
                    else:
                        raise ValueError("No image data in webhook response")

            return web.Response(text='{"status":"success"}')

        except Exception as e:
            logger.error(f"Error processing webhook: {e}", exc_info=True)
            return web.Response(status=500, text=str(e))