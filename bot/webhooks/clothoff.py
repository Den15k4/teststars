from aiohttp import web
import logging
import json
import base64
from bot.keyboards.markups import Keyboards
from io import BytesIO

logger = logging.getLogger(__name__)

class ClothOffWebhook:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.keyboards = Keyboards

    async def handle_webhook(self, request: web.Request) -> web.Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç ClothOff API"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            body = await request.read()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(body)} bytes")

            if len(body) > 50 * 1024 * 1024:  # 50 MB
                logger.error(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç: {len(body)} bytes")
                raise web.HTTPRequestEntityTooLarge(
                    max_size=50 * 1024 * 1024,
                    actual_size=len(body)
                )

            try:
                # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON
                if request.content_type == 'application/json':
                    data = await request.json()
                else:
                    # –ï—Å–ª–∏ content-type –Ω–µ json, –ø—Ä–æ–±—É–µ–º —Å–∞–º–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
                    try:
                        data = json.loads(body)
                    except json.JSONDecodeError:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        data = {'result': body}
                
                logger.info(f"–¢–∏–ø –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                logger.info(f"–ö–ª—é—á–∏ –≤ –¥–∞–Ω–Ω—ã—Ö: {data.keys() if isinstance(data, dict) else 'binary data'}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                data = {'result': body}

            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ id_gen
            try:
                user_id = int(data['id_gen'].split('_')[1])
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω user_id: {user_id}")
            except (KeyError, IndexError, ValueError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ user_id: {e}")
                return web.Response(status=400, text="Invalid id_gen format")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.db.get_user(user_id)
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_id}")
                return web.Response(status=404, text="User not found")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if data.get('status') == '500' or data.get('img_message') or data.get('img_message_2'):
                error_msg = data.get('img_message') or data.get('img_message_2') or 'Unknown error'
                logger.error(f"–û—à–∏–±–∫–∞ API: {error_msg}")
                
                if 'Age is too young' in error_msg:
                    message_text = ("üîû –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ –º–ª–∞–¥—à–µ 18 –ª–µ—Ç.\n"
                                  "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞.")
                else:
                    message_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n{error_msg}"

                await self.bot.send_message(
                    user_id,
                    message_text,
                    reply_markup=self.keyboards.main_menu()
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç –∏ –æ—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
                await self.db.return_credit(user_id)
                await self.db.clear_pending_task(user_id)
                return web.Response(text='{"status":"error_handled"}')

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            try:
                image_data = None
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if isinstance(data, dict):
                    if 'result' in data:
                        if isinstance(data['result'], str):
                            if data['result'].startswith('data:image'):
                                # –ï—Å–ª–∏ —ç—Ç–æ base64
                                image_data = base64.b64decode(data['result'].split(',')[1])
                            else:
                                # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å base64
                                try:
                                    image_data = base64.b64decode(data['result'])
                                except:
                                    pass
                        else:
                            # –ï—Å–ª–∏ —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            image_data = data['result']
                    elif 'image' in data:
                        image_data = base64.b64decode(data['image']) if isinstance(data['image'], str) else data['image']
                else:
                    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø—Ä—è–º—ã–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    image_data = body

                if not image_data:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                # –°–æ–∑–¥–∞–µ–º BytesIO –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                photo = BytesIO(image_data)
                photo.seek(0)
                photo.name = 'result.jpg'

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                await self.bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption="‚ú® –ú—ã –µ—ë —Ä–∞–∑–¥–µ–ª–∏! –õ—é–±—É–π—Å—è!\n–ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üí´ –†–∞–∑–¥–µ—Ç—å –ø–æ–¥—Ä—É–≥—É",
                    reply_markup=self.keyboards.main_menu()
                )
                
                # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
                await self.db.clear_pending_task(user_id)
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                return web.Response(text='{"status":"success"}')

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}", exc_info=True)
                await self.bot.send_message(
                    user_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=self.keyboards.main_menu()
                )
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç –∏ –æ—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
                await self.db.return_credit(user_id)
                await self.db.clear_pending_task(user_id)
                return web.Response(status=500, text=str(e))

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ webhook: {e}", exc_info=True)
            return web.Response(status=500, text=str(e))