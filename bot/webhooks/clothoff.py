from aiohttp import web
import logging
import json
from bot.keyboards.markups import Keyboards
from io import BytesIO

logger = logging.getLogger(__name__)

class ClothOffWebhook:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.keyboards = Keyboards

    async def handle_webhook(self, request: web.Request) -> web.Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç ClothOff API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            headers = request.headers
            logger.info(f"Webhook headers: {dict(headers)}")
            
            # –ü–æ–ª—É—á–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = request.query
            logger.info(f"Webhook params: {dict(params)}")
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            body = await request.read()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(body)} bytes")
            logger.info(f"Content-Type: {request.content_type}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if len(body) > 50 * 1024 * 1024:  # 50 MB
                logger.error(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç: {len(body)} bytes")
                raise web.HTTPRequestEntityTooLarge(
                    max_size=50 * 1024 * 1024,
                    actual_size=len(body)
                )

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å id_gen –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            id_gen = params.get('id_gen') or headers.get('X-Task-ID')
            
            if not id_gen:
                logger.error("id_gen –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ JPEG –∏–ª–∏ PNG —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
                if body.startswith(b'\x89PNG') or body.startswith(b'\xff\xd8\xff'):
                    # –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å id_gen –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ id_gen
                    logger.info("–ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    return web.Response(text='{"status":"success"}')
                return web.Response(status=400, text="Missing id_gen")

            try:
                user_id = int(id_gen.split('_')[1])
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω user_id: {user_id}")
            except (IndexError, ValueError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ user_id –∏–∑ {id_gen}: {e}")
                return web.Response(status=400, text="Invalid id_gen format")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.db.get_user(user_id)
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_id}")
                return web.Response(status=404, text="User not found")

            # –ï—Å–ª–∏ content-type —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–æ–π,
            # —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (request.content_type and 'image' in request.content_type.lower()) or len(body) > 100000:
                logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                # –°–æ–∑–¥–∞–µ–º BytesIO –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                photo = BytesIO(body)
                photo.name = 'result.jpg'

                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                    await self.bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption="‚ú® –ú—ã –µ—ë —Ä–∞–∑–¥–µ–ª–∏! –õ—é–±—É–π—Å—è!\n–ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üí´ –†–∞–∑–¥–µ—Ç—å –ø–æ–¥—Ä—É–≥—É",
                        reply_markup=self.keyboards.main_menu()
                    )
                    
                    # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
                    await self.db.clear_pending_task(user_id)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                    return web.Response(text='{"status":"success"}')
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç
                    await self.db.return_credit(user_id)
                    await self.db.clear_pending_task(user_id)
                    await self.bot.send_message(
                        user_id,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=self.keyboards.main_menu()
                    )
                    raise

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ JSON
            try:
                data = json.loads(body)
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
                if data.get('status') == '500' or data.get('img_message') or data.get('img_message_2'):
                    error_msg = data.get('img_message') or data.get('img_message_2') or 'Unknown error'
                    logger.error(f"–û—à–∏–±–∫–∞ API: {error_msg}")
                    
                    message_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n" + error_msg
                    if 'Age is too young' in error_msg:
                        message_text = ("üîû –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ –º–ª–∞–¥—à–µ 18 –ª–µ—Ç.\n"
                                      "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞.")

                    await self.bot.send_message(
                        user_id,
                        message_text,
                        reply_markup=self.keyboards.main_menu()
                    )
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç
                    await self.db.return_credit(user_id)
                    await self.db.clear_pending_task(user_id)
                    
                return web.Response(text='{"status":"handled"}')

            except json.JSONDecodeError:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return web.Response(status=400, text="Invalid data format")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ webhook: {e}", exc_info=True)
            return web.Response(status=500, text=str(e))