from aiohttp import web
import logging
from bot.keyboards.markups import Keyboards
from aiogram.types import BufferedInputFile

logger = logging.getLogger(__name__)

class ClothOffWebhook:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.keyboards = Keyboards

    async def handle_webhook(self, request: web.Request) -> web.Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç ClothOff API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            headers = request.headers
            params = request.query
            logger.info(f"Webhook headers: {dict(headers)}")
            logger.info(f"Webhook params: {dict(params)}")

            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            body = await request.read()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(body)} bytes")
            logger.info(f"Content-Type: {request.content_type}")

            # –ü–æ–ª—É—á–∞–µ–º id_gen –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            id_gen = params.get('id_gen')
            if not id_gen:
                logger.error("id_gen –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
                return web.Response(status=400, text="Missing id_gen")

            try:
                user_id = int(id_gen.split('_')[1])
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω user_id: {user_id}")
            except (IndexError, ValueError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ user_id: {e}")
                return web.Response(status=400, text="Invalid id_gen format")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.db.get_user(user_id)
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_id}")
                return web.Response(status=404, text="User not found")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if len(body) > 100000 or request.content_type.startswith('multipart/form-data'):
                logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                try:
                    # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ –±–∞–π—Ç–æ–≤
                    input_file = BufferedInputFile(
                        file=body,
                        filename="result.jpg"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                    await self.bot.send_photo(
                        chat_id=user_id,
                        photo=input_file,
                        caption="‚ú® –ú—ã –µ—ë —Ä–∞–∑–¥–µ–ª–∏! –õ—é–±—É–π—Å—è!\n–ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üí´ –†–∞–∑–¥–µ—Ç—å –ø–æ–¥—Ä—É–≥—É",
                        reply_markup=self.keyboards.main_menu()
                    )
                    
                    # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
                    await self.db.clear_pending_task(user_id)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                    return web.Response(text='{"status":"success"}')
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}", exc_info=True)
                    await self.db.return_credit(user_id)
                    await self.db.clear_pending_task(user_id)
                    await self.bot.send_message(
                        user_id,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=self.keyboards.main_menu()
                    )
                    raise

            logger.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
            return web.Response(status=400, text="Unsupported data type")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ webhook: {e}", exc_info=True)
            return web.Response(status=500, text=str(e))