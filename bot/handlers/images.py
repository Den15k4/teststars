import aiohttp
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from bot.database.models import Database
from bot.keyboards.markups import Keyboards
from bot.services.clothoff import ClothOffAPI
from bot.config import config
import logging

router = Router()
clothoff_api = ClothOffAPI()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "start_processing")
async def start_processing(callback: CallbackQuery, db: Database):
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        credits = await db.check_credits(user_id)
        if credits <= 0:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
            try:
                await callback.message.edit_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                    reply_markup=Keyboards.payment_menu()
                )
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    raise
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        user = await db.get_user(user_id)
        if user.get('pending_task_id'):
            await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞!")
            try:
                await callback.message.edit_text(
                    "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                    reply_markup=Keyboards.main_menu()
                )
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    raise
            return

        try:
            await callback.message.edit_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
                "‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
                "1. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª—é–¥–µ–π —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç\n"
                "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —á—ë—Ç–∫–æ –≤—Å–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å\n"
                "3. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞",
                reply_markup=Keyboards.processing_cancel()
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in start_processing: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.message(F.photo)
async def handle_photo(message: Message, db: Database):
    user_id = message.from_user.id
    processing_msg = None

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        credits = await db.check_credits(user_id)
        if credits <= 0:
            await message.reply(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                reply_markup=Keyboards.payment_menu()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        user = await db.get_user(user_id)
        if user.get('pending_task_id'):
            await message.reply(
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=Keyboards.main_menu()
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.reply("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–µ–≤–∞—Ç—å...")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        photo = message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f'https://api.telegram.org/file/bot{config.BOT_TOKEN}/{file.file_path}'
            ) as response:
                image_data = await response.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        if not await clothoff_api.check_age(image_data):
            raise ValueError("AGE_RESTRICTION")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        result = await clothoff_api.process_image(image_data, user_id)

        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        await db.use_credit(user_id)
        await db.update_pending_task(user_id, result['id_gen'])

        await message.reply(
            "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É:\n\n"
            f"‚è± –í—Ä–µ–º—è –≤ –æ—á–µ—Ä–µ–¥–∏: {result['queue_time']} —Å–µ–∫\n"
            f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {result['queue_num']}\n"
            f"üîÑ ID –∑–∞–¥–∞—á–∏: {result['id_gen']}\n\n"
            "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∫–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.",
            reply_markup=Keyboards.main_menu()
        )

    except ValueError as e:
        error_msg = str(e)
        if error_msg == "AGE_RESTRICTION":
            await message.reply(
                "üîû –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞:\n\n"
                "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –ª—é–¥–∏ —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.",
                reply_markup=Keyboards.main_menu()
            )
        else:
            raise

    except Exception as e:
        logger.error(f"Error processing image: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        
        if 'INSUFFICIENT_BALANCE' in str(e):
            error_msg = (
                "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–∞–ª–∞–Ω—Å API. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.\n\n"
                "–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ."
            )

        await message.reply(error_msg, reply_markup=Keyboards.main_menu())
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if credits > 0:
            await db.return_credit(user_id)

    finally:
        if processing_msg:
            try:
                await processing_msg.delete()
            except Exception as e:
                logger.error(f"Error deleting processing message: {e}")