import logging
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
from bot.keyboards.markups import Keyboards

logger = logging.getLogger(__name__)
router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username

        logger.info(f"Starting command received from user {user_id} ({username})")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await db.add_user(user_id, username)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        if message.text and ' ' in message.text:
            args = message.text.split()[1]
            if args.startswith('ref'):
                try:
                    referrer_id = int(args[3:])
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
                    logger.info(f"Referral parameter detected: {referrer_id}")
                except ValueError:
                    logger.error("Invalid referral parameter")

        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–¥–µ—Ç—å –ª—é–±—É—é –¥–∞–º—É!üîû\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã üí∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=Keyboards.main_menu()
        )
        logger.info(f"Welcome message sent to user {user_id}")

    except Exception as e:
        logger.error(f"Error in start command handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.answer()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=Keyboards.main_menu()
        )
    except Exception as e:
        logger.error(f"Error in back_to_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "check_balance")
async def check_balance(callback: types.CallbackQuery, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        user_id = callback.from_user.id
        credits = await db.check_credits(user_id)

        await callback.answer()
        await callback.message.edit_text(
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
            "1 –∫—Ä–µ–¥–∏—Ç = 1 –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            reply_markup=Keyboards.back_to_menu()
        )
    except Exception as e:
        logger.error(f"Error in check_balance: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)