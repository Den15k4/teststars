from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, LabeledPrice
from aiogram.exceptions import TelegramBadRequest
from bot.database.models import Database
from bot.keyboards.markups import Keyboards
from bot.config import config
from bot.services.referral import ReferralSystem
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "buy_credits")
async def show_payment_options(callback: CallbackQuery):
    try:
        await callback.answer()
        await callback.message.edit_text(
            "üí´ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n\n"
            "‚ÑπÔ∏è –ß–µ–º –±–æ–ª—å—à–µ –ø–∞–∫–µ—Ç, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!\n\n"
            "üí≥ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏",
            reply_markup=Keyboards.payment_menu()
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            logger.error(f"Error in show_payment_options: {e}")
    except Exception as e:
        logger.error(f"Error in show_payment_options: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

@router.callback_query(F.data == "check_balance")
async def check_balance(callback: CallbackQuery, db: Database):
    try:
        credits = await db.check_credits(callback.from_user.id)
        await callback.message.edit_text(
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
            "1 –∫—Ä–µ–¥–∏—Ç = 1 –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            reply_markup=Keyboards.payment_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in check_balance: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞", show_alert=True)

@router.callback_query(F.data.matches(r"buy_\d+_stars"))
async def process_buy(callback: CallbackQuery, db: Database):
    try:
        package_id = int(callback.data.split("_")[1])
        package = next(
            (p for p in config.PACKAGES if p["id"] == package_id),
            None
        )
        
        if not package:
            await callback.answer("–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é
        bot_username = (await callback.bot.get_me()).username
        payment_url = f"https://t.me/{bot_username}/star/{package['credits']}"

        await callback.message.edit_text(
            f"üí´ –ü–æ–∫—É–ø–∫–∞ {package['description']}\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {package['credits']} –∑–≤–µ–∑–¥\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            reply_markup={
                'inline_keyboard': [
                    [{'text': f"‚≠êÔ∏è –û–ø–ª–∞—Ç–∏—Ç—å {package['credits']} –∑–≤–µ–∑–¥", 'url': payment_url}],
                    [{'text': "‚Ü©Ô∏è –ù–∞–∑–∞–¥", 'callback_data': "back_to_menu"}]
                ]
            }
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in process_buy: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

@router.message(F.successful_payment)
async def successful_payment(message: Message, db: Database):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–∞–∫–µ—Ç–∞ –∏–∑ payload
        package_id = int(message.successful_payment.invoice_payload.split("_")[1])
        package = next(
            (p for p in config.PACKAGES if p["id"] == package_id),
            None
        )

        if package:
            # –ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
            await db.update_credits(message.from_id, package['credits'])

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            referral_system = ReferralSystem(db)
            bonus_amount = await referral_system.process_referral_payment(
                message.from_id,
                package['price']
            )

            if bonus_amount and referral_system:
                referrer_id = await db.get_user_referrer(message.from_id)
                if referrer_id:
                    await message.bot.send_message(
                        referrer_id,
                        f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {bonus_amount:.2f} RUB "
                        f"–æ—Ç –æ–ø–ª–∞—Ç—ã –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!"
                    )

            await message.answer(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n"
                f"üí´ –ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                f"–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
                reply_markup={
                    'inline_keyboard': [
                        [
                            {'text': 'üí´ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É', 'callback_data': 'start_processing'},
                            {'text': '‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'back_to_menu'}
                        ]
                    ]
                }
            )

    except Exception as e:
        logger.error(f"Error in successful_payment: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.",
            reply_markup=Keyboards.back_keyboard()
        )
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–∞–∫–µ—Ç–∞ –∏–∑ payload
        package_id = int(message.successful_payment.invoice_payload.split("_")[1])
        package = next(
            (p for p in config.PACKAGES if p["id"] == package_id),
            None
        )

        if package:
            # –ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
            await db.update_credits(message.from_id, package['credits'])

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            referral_system = ReferralSystem(db)
            bonus_amount = await referral_system.process_referral_payment(
                message.from_id,
                package['price']
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –±–æ–Ω—É—Å–µ
            if bonus_amount:
                referrer_id = await db.get_user_referrer(message.from_id)
                if referrer_id:
                    await message.bot.send_message(
                        referrer_id,
                        f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {bonus_amount:.2f} RUB "
                        f"–æ—Ç –æ–ø–ª–∞—Ç—ã –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!"
                    )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
            success_text = (
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n"
                f"üí´ –ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                f"–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"
            )
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            quick_action_keyboard = {
                'inline_keyboard': [
                    [
                        {'text': 'üí´ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É', 'callback_data': 'start_processing'},
                        {'text': '‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'back_to_menu'}
                    ]
                ]
            }

            await message.answer(
                success_text,
                reply_markup=quick_action_keyboard
            )

    except Exception as e:
        logger.error(f"Error in successful_payment: {e}")
        error_text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞."
        )
        await message.answer(
            error_text,
            reply_markup=Keyboards.back_keyboard()
        )

@router.pre_checkout_query()
async def pre_checkout(pre_checkout_query):
    try:
        await pre_checkout_query.answer(ok=True)
    except Exception as e:
        logger.error(f"Error in pre_checkout: {e}")
        await pre_checkout_query.answer(
            ok=False,
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )