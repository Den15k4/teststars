import asyncio
import logging
from typing import Any, Awaitable, Callable, Dict
from aiogram import Bot, Dispatcher, BaseMiddleware
from aiogram.enums import ParseMode
from aiogram.types import Message, TelegramObject
from aiogram.filters import CommandStart, CommandObject
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
import json

from bot.config import config
from bot.database.models import Database
from bot.keyboards.markups import Keyboards
from bot.handlers import payments, referral, images
from bot.services.referral import ReferralSystem
from bot.webhooks.clothoff import ClothOffWebhook

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ db –≤ —Ö—ç–Ω–¥–ª–µ—Ä—ã
class DatabaseMiddleware(BaseMiddleware):
    def __init__(self, database: Database):
        super().__init__()
        self.database = database

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        data["db"] = self.database
        return await handler(event, data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
db = Database(config.DATABASE_URL)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware
dp.update.middleware.register(DatabaseMiddleware(db))

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(payments.router)
dp.include_router(referral.router)
dp.include_router(images.router)

# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
app = web.Application(client_max_size=50 * 1024 * 1024)  # 50 MB
clothoff_webhook = ClothOffWebhook(bot, db)

# –ú–∞—Ä—à—Ä—É—Ç—ã
@web.middleware
async def error_middleware(request: web.Request, handler):
    try:
        return await handler(request)
    except Exception as ex:
        logger.error(f"Error in middleware: {ex}", exc_info=True)
        return web.Response(status=500, text=str(ex))

app.middlewares.append(error_middleware)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def health_check(request: web.Request) -> web.Response:
    return web.Response(text='OK')

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç—ã
app.router.add_post('/clothoff/webhook', clothoff_webhook.handle_webhook)
app.router.add_get('/health', health_check)

# –ë–∞–∑–æ–≤—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
@dp.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject, db: Database):
    user_id = message.from_user.id
    username = message.from_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.add_user(user_id, username)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    args = command.args
    if args and args.startswith('ref'):
        try:
            referrer_id = int(args[3:])
            referral_system = ReferralSystem(db)
            error = await referral_system.process_referral(user_id, referrer_id)
            if not error:
                await message.answer("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
        except ValueError:
            pass

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–¥–µ—Ç—å –ª—é–±—É—é –¥–∞–º—É!üîû\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã üí∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=Keyboards.main_menu()
    )

async def run_webhook_server():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    logger.info(f"Started webhook server at port 8080")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await db.connect()
    await db.init_db()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä
    await run_webhook_server()
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot)
    finally:
        await db.close()
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")