import asyncio
import logging
from datetime import datetime, timedelta
from typing import Any, Awaitable, Callable, Dict
from aiogram import Bot, Dispatcher, BaseMiddleware
from aiogram.enums import ParseMode
from aiogram.types import Message, TelegramObject
from aiogram.filters import CommandStart, CommandObject
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
import json

from bot.config import config
from bot.database.models import Database
from bot.keyboards.markups import Keyboards
from bot.handlers import payments, referral, images, main_handlers
from bot.services.referral import ReferralSystem
from bot.webhooks.clothoff import ClothOffWebhook

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ db –≤ —Ö—ç–Ω–¥–ª–µ—Ä—ã
class DatabaseMiddleware(BaseMiddleware):
    def __init__(self, database: Database):
        super().__init__()
        self.database = database

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        data["db"] = self.database
        return await handler(event, data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
db = Database(config.DATABASE_URL)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware
dp.update.middleware.register(DatabaseMiddleware(db))

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
dp.include_router(main_handlers.router)  # –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏
dp.include_router(payments.router)
dp.include_router(referral.router)
dp.include_router(images.router)

# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
app = web.Application(client_max_size=50 * 1024 * 1024)  # 50 MB
clothoff_webhook = ClothOffWebhook(bot, db)

# –ë–∞–∑–æ–≤—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
@dp.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject, db: Database):
    user_id = message.from_user.id
    username = message.from_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.add_user(user_id, username)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    args = command.args
    if args and args.startswith('ref'):
        try:
            referrer_id = int(args[3:])
            referral_system = ReferralSystem(db)
            error = await referral_system.process_referral(user_id, referrer_id)
            if not error:
                await message.answer("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
        except ValueError:
            pass

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–¥–µ—Ç—å –ª—é–±—É—é –¥–∞–º—É!üîû\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã üí∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=Keyboards.main_menu()
    )

async def cleanup_tasks():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            stale_tasks = await db.cleanup_stale_tasks()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for task in stale_tasks:
                try:
                    time_passed = datetime.now(task['last_used'].tzinfo) - task['last_used']
                    minutes_passed = int(time_passed.total_seconds() / 60)
                    
                    await bot.send_message(
                        task['user_id'],
                        f"‚ö†Ô∏è –í–∞—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—à–ª–æ {minutes_passed} –º–∏–Ω—É—Ç.\n"
                        "üí´ –ö—Ä–µ–¥–∏—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.",
                        reply_markup=Keyboards.main_menu()
                    )
                except Exception as e:
                    logger.error(f"Error notifying user {task['user_id']} about stale task: {e}")
            
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logger.error(f"Error in cleanup task: {e}")
            await asyncio.sleep(60)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º –º–∏–Ω—É—Ç—É
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            stale_tasks = await db.cleanup_stale_tasks()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for task in stale_tasks:
                try:
                    time_passed = datetime.now() - task['last_used']
                    minutes_passed = int(time_passed.total_seconds() / 60)
                    
                    await bot.send_message(
                        task['user_id'],
                        f"‚ö†Ô∏è –í–∞—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—à–ª–æ {minutes_passed} –º–∏–Ω—É—Ç.\n"
                        "üí´ –ö—Ä–µ–¥–∏—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.",
                        reply_markup=Keyboards.main_menu()
                    )
                except Exception as e:
                    logger.error(f"Error notifying user {task['user_id']} about stale task: {e}")
            
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logger.error(f"Error in cleanup task: {e}")
            await asyncio.sleep(60)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º –º–∏–Ω—É—Ç—É

async def run_webhook_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    logger.info(f"Started webhook server at port 8080")

# –ú–∞—Ä—à—Ä—É—Ç—ã
app.router.add_post('/clothoff/webhook', clothoff_webhook.handle_webhook)
app.router.add_get('/health', lambda _: web.Response(text='OK'))

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        await db.connect()
        await db.init_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä
        await run_webhook_server()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á
        asyncio.create_task(cleanup_tasks())
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    finally:
        await db.close()
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")